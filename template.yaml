AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >
  aws-eventbridge-pipes-demo

  SAM Template for aws-eventbridge-pipes-demo

Parameters:
  pEmailDomainName:
    Type: "String"
    Description: "The domain name to verify for the SES email identity"

Resources:
  OrdersQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "orders-to-be-processed"
      RedrivePolicy:
        maxReceiveCount: 1
        deadLetterTargetArn: !GetAtt "OrdersDeadLetterQueue.Arn"

  OrdersDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "orders-to-be-processed-dlq"

  SesEmailIdentity:
    Type: "AWS::SES::EmailIdentity"
    Properties:
      EmailIdentity: !Ref "pEmailDomainName"

  ShopDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"

  ProcessOrderStateMachine:
    Type: "AWS::Serverless::StateMachine"
    Properties:
      Type: "EXPRESS"
      DefinitionUri: "./state-machines/process-order.asl.yaml"
      DefinitionSubstitutions:
        ShopTableName: !Ref "ShopDynamoDBTable"
        FromEmailAddress: !Join ["@", ["shop", !Ref "pEmailDomainName"]]
      Policies:
        - Statement:
          - Sid: "WriteAccessToDynamoDbTable"
            Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
            Resource:
              - !GetAtt "ShopDynamoDBTable.Arn"
          - Sid: "SendEmailViaSES"
            Effect: "Allow"
            Action:
              - "ses:SendEmail"
            Resource:
              - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${SesEmailIdentity}"

  CustomerDataEnrichmentFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: "./lambda-functions/customer-data-enrichment"
      Handler: "app.lambda_handler"
      Runtime: "python3.9"
      Environment:
        Variables:
          SHOP_DYNAMODB_TABLE: !Ref "ShopDynamoDBTable"
      Policies:
        - Statement:
          - Sid: "ReadDynamoDbTable"
            Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
            Resource:
              - !GetAtt "ShopDynamoDBTable.Arn"

  OrderProcessingPipeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "pipes.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "BaseInlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "UseSqsAsSource"
                Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !GetAtt "OrdersQueue.Arn"
              - Sid: "InvokeEnrichmentLambdaFunction"
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: !GetAtt "CustomerDataEnrichmentFunction.Arn"
              - Sid: "ExecuteSfnWorkflowAsTarget"
                Effect: "Allow"
                Action:
                  - "states:StartSyncExecution"
                Resource: !Ref "ProcessOrderStateMachine"
